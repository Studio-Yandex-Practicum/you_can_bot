from dataclasses import dataclass

from telegram import ForceReply, InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.constants import ParseMode
from telegram.ext import (
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)

from conversations.tasks.keyboards import (
    CONFIRM_KEYBOARD,
    NEXT_KEYBOARD,
    get_default_inline_keyboard,
)
from internal_requests import service as api_service
from internal_requests.entities import Answer

CHOOSING = 1
TYPING_ANSWER = 2
START_QUESTION_NUMBER = 1
BUTTON_LABELS_PATTERN = r"^([1-9]|10|[–ê-–ï])$"
NEXT_BUTTON_PATTERN = r"^–î–∞–ª–µ–µ$"
TASK_CANCEL_TEXT = (
    "–ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–æ. –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –µ–≥–æ"
    ' –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–æ –º–æ–∂–µ—à—å –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é, –ø–µ—Ä–µ–π—Ç–∏ –≤ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å'
    ' –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è" –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /tasks –∏ –≤—ã–±—Ä–∞—Ç—å'
    " –ó–∞–¥–∞–Ω–∏–µ "
)
TASK_START_BUTTON_LABEL = "–ó–∞–¥–∞–Ω–∏–µ "
TASK_ALREADY_DONE_TEXT = (
    "—É–∂–µ –ø—Ä–æ–π–¥–µ–Ω–æ! üòé –ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã,"
    " —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /tasks."
)
SEND_ANSWER_TEXT = (
    "–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω."
    " –î–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—ã –º–æ–∂–µ—à—å –µ–≥–æ –∏–∑–º–µ–Ω–∏—Ç—å.\n–¢–µ–∫—É—â–∏–π –æ—Ç–≤–µ—Ç: "
)
CONFIRM_BUTTON_PATTERN = r"^confirm_answer$"


@dataclass
class BaseTaskConversation:
    """
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±—â–µ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞–º–∏, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∑–∞
    –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π.
    """

    task_number: int
    number_of_questions: int
    description: str
    choices: str
    result_intro: str

    def __post_init__(self):
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç entry_point –¥–ª—è –∑–∞–¥–∞–Ω–∏—è, —Å–æ—Å—Ç–∞–≤–ª—è—è –µ–≥–æ –∏–∑ –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞–Ω–∏—è –∏
        —à–∞–±–ª–æ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ TASK_START_BUTTON_LABEL.
        –§–æ—Ä–º–∏—Ä—É–µ—Ç cancel_text –¥–ª—è –∑–∞–¥–∞–Ω–∏—è, —Å–æ—Å—Ç–∞–≤–ª—è—è –µ–≥–æ –∏–∑ –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞–Ω–∏—è –∏
        —à–∞–±–ª–æ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ TASK_CANCEL_TEXT.
        –î–æ–±–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤.
        """
        self.entry_point_button_label: str = TASK_START_BUTTON_LABEL + str(
            self.task_number
        )
        self.cancel_text: str = TASK_CANCEL_TEXT + str(self.task_number) + "."
        self.question_method = self.show_question
        self.update_method = self.handle_user_answer

    async def check_current_task_is_done(self, update: Update) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–æ—Ö–æ–¥–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ."""
        task_status = await api_service.get_user_task_status_by_number(
            task_number=self.task_number, telegram_id=update.effective_user.id
        )
        return task_status.is_done

    async def show_task_description(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> int:
        """
        –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—é –∑–∞–¥–∞–Ω–∏—è.
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ CallbackQueryHandler –≤ –º–µ—Ç–æ–¥–µ set_entry_points.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç CHOOSING (—á–∏—Å–ª–æ, —Ä–∞–≤–Ω–æ–µ 1), —á—Ç–æ–±—ã –¥–∏–∞–ª–æ–≥ –ø–µ—Ä–µ—à–µ–ª
        –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ CHOOSING.
        """
        if update.callback_query:
            await update.callback_query.edit_message_reply_markup()
        task_done = await self.check_current_task_is_done(update=update)
        if task_done:
            text = f"{self.entry_point_button_label} {TASK_ALREADY_DONE_TEXT}"
            await update.effective_message.reply_text(text=text)
            return ConversationHandler.END

        description = self.description
        context.user_data["current_question"] = START_QUESTION_NUMBER
        await update.effective_message.reply_text(
            text=description,
            reply_markup=NEXT_KEYBOARD,
        )
        return CHOOSING

    async def show_question(
        self,
        update: Update,
        _context: ContextTypes.DEFAULT_TYPE,
        question_number: int = 1,
    ) -> None:
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥–Ω–æ–π –≤–æ–ø—Ä–æ—Å, –æ—Ç–Ω–æ—Å—è—â–∏–π—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É –∑–∞–¥–∞–Ω–∏—é.
        –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å.
        """
        if question_number == 1:
            await update.callback_query.edit_message_reply_markup()
        messages = await api_service.get_messages_with_question(
            task_number=self.task_number,
            question_number=question_number,
        )
        await update.effective_message.reply_text(
            text=messages[0].content,
            reply_markup=get_default_inline_keyboard(self.choices),
            parse_mode=ParseMode.HTML,
        )
        await update.callback_query.answer()

    async def handle_user_answer(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> int:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –º–µ—Ç–æ–¥ show_question,
        —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π,
        –≤—ã–∑—ã–≤–∞–µ—Ç show_result, —á—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥.
        """
        picked_choice = update.callback_query.data
        message = update.effective_message
        await message.edit_text(
            text=f"{message.text_html}\n\n–û—Ç–≤–µ—Ç: {picked_choice.upper()}",
            parse_mode=ParseMode.HTML,
        )
        current_question = context.user_data.get("current_question")
        await api_service.create_answer(
            Answer(
                telegram_id=message.chat_id,
                task_number=self.task_number,
                number=current_question,
                content=update.callback_query.data.lower(),
            )
        )
        if current_question == self.number_of_questions:
            state = await self.show_result(update, context)
            return state
        context.user_data["current_question"] += 1
        await self.show_question(
            update, context, context.user_data.get("current_question")
        )
        return CHOOSING

    async def show_result(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è,
        –ø–æ—Å–ª–µ —á–µ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–¥–∞–Ω–∏—é.
        """
        query = update.callback_query
        if self.result_intro:
            await query.message.reply_text(
                text=self.result_intro,
                parse_mode=ParseMode.HTML,
            )
        results = await api_service.get_messages_with_results(
            telegram_id=query.from_user.id, task_number=self.task_number
        )
        for result in results[:-1]:
            await query.message.reply_text(
                text=result.content,
                parse_mode=ParseMode.HTML,
            )
        await query.message.reply_text(
            text=results[-1].content,
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(
                (
                    (
                        InlineKeyboardButton(
                            text=f"–ó–∞–¥–∞–Ω–∏–µ {self.task_number + 1}",
                            callback_data=f"start_task_{self.task_number + 1}",
                        ),
                    ),
                )
            ),
        )
        context.user_data.clear()
        return ConversationHandler.END

    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """
        –ü—Ä–µ—Ä—ã–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º.
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ CallbackQueryHandler –≤ –º–µ—Ç–æ–¥–µ set_fallbacks.
        """
        await update.message.reply_text(self.cancel_text)
        context.user_data.clear()
        return ConversationHandler.END

    def set_entry_points(self):
        """
        –û–ø–∏—Å—ã–≤–∞–µ—Ç entry_points –¥–ª—è –≤—Ö–æ–∂–¥–µ–Ω–∏—è –≤ –¥–∏–∞–ª–æ–≥.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ö—ç–Ω–¥–ª–µ—Ä–∞ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è.
        """
        return [
            MessageHandler(
                filters.Regex(self.entry_point_button_label), self.show_task_description
            ),
            CallbackQueryHandler(
                self.show_task_description, pattern=rf"^start_task_{self.task_number}$"
            ),
        ]

    def set_states(self):
        """
        –£–ø—Ä–∞–≤–ª—è–µ—Ç –≤–µ–¥–µ–Ω–∏–µ–º –¥–∏–∞–ª–æ–≥–∞.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ö—ç–Ω–¥–ª–µ—Ä–∞ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è.
        """
        return {
            CHOOSING: [
                CallbackQueryHandler(self.question_method, pattern=NEXT_BUTTON_PATTERN),
                CallbackQueryHandler(self.update_method, pattern=BUTTON_LABELS_PATTERN),
            ]
        }

    def set_fallbacks(self):
        """
        –£–ø—Ä–∞–≤–ª—è–µ—Ç –≤—ã—Ö–æ–¥–æ–º –∏–∑ –¥–∏–∞–ª–æ–≥–∞.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ö—ç–Ω–¥–ª–µ—Ä–∞ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è.
        """
        return [CommandHandler("cancel", self.cancel)]

    def add_handlers(self):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Ö—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞–Ω–∏—è: entry_points, states –∏ fallbacks.
        """
        return ConversationHandler(
            entry_points=self.set_entry_points(),
            states=self.set_states(),
            fallbacks=self.set_fallbacks(),
        )


class OneQuestionConversation(BaseTaskConversation):
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—â–µ–Ω–∏—è –ø–æ –∑–∞–¥–∞–Ω–∏—è–º —Å –æ–¥–Ω–∏–º –≤–æ–ø—Ä–æ—Å–æ–º –∏ –æ—Ç–≤–µ—Ç–æ–º –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ."""

    async def show_question(
        self, update: Update, _context: ContextTypes.DEFAULT_TYPE
    ) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∑–∞–¥–∞–Ω–∏—è."""
        if update.callback_query:
            await update.callback_query.edit_message_reply_markup()
        task_done = await self.check_current_task_is_done(update=update)
        if task_done:
            text = f"{self.entry_point_button_label} {TASK_ALREADY_DONE_TEXT}"
            await update.effective_message.reply_text(text=text)
            return ConversationHandler.END

        messages = await api_service.get_messages_with_question(
            task_number=self.task_number, question_number=self.number_of_questions
        )
        await update.effective_message.reply_text(
            text=messages[0].content,
            reply_markup=ForceReply(selective=True),
            parse_mode=ParseMode.HTML,
        )
        await update.callback_query.answer()
        return TYPING_ANSWER

    async def handle_user_answer(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> int:
        """
        –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ, –∑–∞–ø—Ä–∞—à–≤–∞–µ—Ç
        –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –æ—Ç–≤–µ—Ç–∞.
        """
        original_answer_id = context.user_data.get("answer_id")
        answer_text = None
        answer_id = None

        if update.message:
            answer_text = update.message.text
            answer_id = update.message.message_id

        elif (
            update.edited_message
            and update.edited_message.message_id == original_answer_id
        ):
            answer_text = update.edited_message.text
            answer_id = update.edited_message.message_id
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=context.user_data.get("confirmation_message_id"),
                text=SEND_ANSWER_TEXT + '"' + answer_text + '"',
                reply_markup=CONFIRM_KEYBOARD,
            )

        else:
            return

        if answer_text and answer_id:
            context.user_data["answer_text"] = answer_text
            context.user_data["answer_id"] = answer_id

        if not context.user_data.get("confirmation_message_id") and update.message:
            confirmation_message = await update.effective_message.reply_text(
                text=SEND_ANSWER_TEXT + '"' + answer_text + '"',
                reply_markup=CONFIRM_KEYBOARD,
            )
            context.user_data[
                "confirmation_message_id"
            ] = confirmation_message.message_id

    async def confirm_saving_answer(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> int:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ–± —ç—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å
        –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–¥–∞–Ω–∏—é –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥.
        """
        confirmation_message_id = context.user_data.get("confirmation_message_id")
        if confirmation_message_id:
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=confirmation_message_id,
            )
        answer_text = context.user_data.get("answer_text")
        await api_service.create_answer(
            Answer(
                telegram_id=update.effective_user.id,
                task_number=self.task_number,
                number=self.number_of_questions,
                content=answer_text,
            )
        )
        await update.effective_message.reply_text(
            text=self.result_intro,
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(
                (
                    (
                        InlineKeyboardButton(
                            text=f"–ó–∞–¥–∞–Ω–∏–µ {self.task_number + 1}",
                            callback_data=f"start_task_{self.task_number + 1}",
                        ),
                    ),
                )
            ),
        )
        context.user_data.clear()
        return ConversationHandler.END

    def set_entry_points(self):
        """–û–ø–∏—Å—ã–≤–∞–µ—Ç entry_point –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –¥–∏–∞–ª–æ–≥: –∫–Ω–æ–ø–∫–∞ '–ó–∞–¥–∞—á–∞ 5'."""
        return [
            CallbackQueryHandler(
                self.show_question, pattern=f"start_task_{self.task_number}"
            )
        ]

    def set_states(self):
        """–£–ø—Ä–∞–≤–ª—è–µ—Ç –≤–µ–¥–µ–Ω–∏–µ–º –¥–∏–∞–ª–æ–≥–∞."""
        return {
            TYPING_ANSWER: [
                MessageHandler(
                    filters=filters.TEXT & ~filters.COMMAND,
                    callback=self.handle_user_answer,
                ),
                MessageHandler(
                    filters=filters.UpdateType.EDITED_MESSAGE,
                    callback=self.handle_user_answer,
                ),
                CallbackQueryHandler(
                    callback=self.confirm_saving_answer, pattern=CONFIRM_BUTTON_PATTERN
                ),
            ],
        }
