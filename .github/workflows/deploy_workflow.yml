name: Prod backend and bot build and deploy

on:
  pull_request:
    branches:
      - develop
    types:
      - closed
  workflow_dispatch:
    inputs:
      environment:
        description: Environment to run tests
        required: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: you_can_bot
  DEPLOY_PATH: ~/you_can_bot

defaults:
  run:
    working-directory: .

jobs:
  testing:
    runs-on: ubuntu-latest
    steps:
    -
      name: Check out the repo
      uses: actions/checkout@v3
    -
      name: Setup Poetry
      uses: Gr1N/setup-poetry@v8
      with:
        poetry-version: "1.5.1"
    -
      name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    -
      name: Install dependencies
      run: |
        poetry install
    -
      name: Django tests
      env:
        NEED_SQLITE: True
      run: |
        poetry run python src/backend/manage.py test src/backend
    -
      name: Bot tests
      env:
        NEED_SQLITE: True
      run: |
        cd src/bot
        poetry run python -m unittest

  build-and-push-image-to-github-packages:
    environment:
      name: test
    name: Push Docker image to GitHub Packages
    runs-on: ubuntu-latest
    needs: testing
    permissions:
      contents: read
      packages: write
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set variables
        run: |
          echo REP_OWNER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV
      -
        name: GitHub Packages login
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          USERNAME: ${{ github.actor }}
          GITHUB: ${{ env.REGISTRY }}
        run: echo "$GITHUB_TOKEN" | docker login "${GITHUB}" -u "${USERNAME}" --password-stdin
      -
        name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REP_OWNER }}/${{ env.IMAGE_NAME }}:latest

  deploy:
    name: Deploy changes on server
    runs-on: ubuntu-latest
    environment:
      name: test
    needs: build-and-push-image-to-github-packages
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
        with:
          ref: master
      -
        name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd ${{ env.DEPLOY_PATH }}
            rm .env
            
            echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} > .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env

            echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
            echo DEBUG=${{ vars.DEBUG }} >> .env
            echo DJANGO_ALLOWED_HOSTS=${{ secrets.DJANGO_ALLOWED_HOSTS }} >> .env
            
            echo DB_ENGINE=${{ secrets.ENGINE }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            
            echo INTERNAL_API_URL=${{ secrets.INTERNAL_API_URL }} >> .env
            echo YOUCANBY_TOKEN=${{ secrets.YOUCANBY_TOKEN }} >> .env
            echo YOUCANBY_API_URL=${{ secrets.YOUCANBY_API_URL }} >> .env
            
            echo TOKEN=${{ secrets.TOKEN }} >> .env
            echo EXTERNAL_REQUESTS_ARE_MOCK=${{ vars.EXTERNAL_REQUESTS_ARE_MOCK }} >> .env
            echo MAIN_MENTOR_ID=${{ secrets.MAIN_MENTOR_ID }} >> .env

            sudo docker pull ${{ env.REGISTRY }}/${{ env.REP_OWNER }}/${{ env.IMAGE_NAME }}:latest

            sudo docker system prune --force

            sudo docker-compose you_can_bot/infra/docker-compose.yaml up -d
            sudo docker-compose exec -T backend python manage.py migrate
            sudo docker-compose exec -T backend python manage.py collectstatic
